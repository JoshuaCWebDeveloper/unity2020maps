
  d3.select('#footer').append('a')
    .html("Map tiles by <a href='http://stamen.com'>Stamen Design</a>, under <a href='http://creativecommons.org/licenses/by/3.0'>CC BY 3.0</a>. Data by <a href='http://openstreetmap.org'>OpenStreetMap</a>, under <a href='http://www.openstreetmap.org/copyright'>ODbL</a>.")


  var isMobile = (typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1)

  if (isMobile)
  {
      d3.select("#panel").remove()
      //L.Map.invalidateSize()
  }
  else
  {
      build_desktop_panel()
  }
  
  // Initialize Map
  // Start view over Washington State, zoomed out
  var map = L.map('mapid').setView([37, -95], 5)
  //map.locate({setView: true})

  var geocoder = L.Control.geocoder({
      //defaultMarkGeocode: false,
      collapsed: false,
      placeholder: "Search..."
      
  })
      .on('markgeocode', function(e) {
	  var bbox = e.geocode.bbox;
	  var poly = L.polygon([
	      bbox.getSouthEast(),
	      bbox.getNorthEast(),
	      bbox.getNorthWest(),
	      bbox.getSouthWest()
	  ])
	  map.fitBounds(poly.getBounds());
      })
      .addTo(map);

  // Print map
  L.control.browserPrint({manualMode: true}).addTo(map)

  // Move leaflet 'control' off the map
  var newParent = document.getElementById('custom-map-controls');
  var oldParent = document.getElementsByClassName("leaflet-top leaflet-right")

  while (oldParent[0].childNodes.length > 0) {
      newParent.appendChild(oldParent[0].childNodes[0]);
  }



  // Add basemap. This can be replaced with an open-source base not from mapbox
  var base_layer = L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/toner-hybrid/{z}/{x}/{y}.png', {
      attribution: 'Stamen Maps (maps.stamen.com)',
      maxZoom: 18,
      id: 'lines',
      tileSize: 512,
      zoomOffset: -1,
  })

  // Add basemap. This can be replaced with an open-source base not from mapbox
  var base_labels = L.tileLayer('https://stamen-tiles.a.ssl.fastly.net/toner-labels/{z}/{x}/{y}.png', {
      attribution: 'Stamen Maps (maps.stamen.com)',
      maxZoom: 18,
      id: 'labels',
      tileSize: 512,
      zoomOffset: -1,
  })
  
  // URL of the AWS server with Tileserver running
  var url = "https://maps443.tcpdump.rocks/data/precentile_precincts/{z}/{x}/{y}.pbf"

  // Add our map
  var unity_map = L.vectorGrid.protobuf(url, {
      maxZoom: 20,
      vectorTileLayerStyles: {
	  interactive: true,
	  percentile_precincts_1: properties => {
	      return getColorFromProperty(properties)
	  }
      },
      // MUST include attribution - where we got this data
      attribution: ' 2016 Precinct-Level Election Results - Harvard Datasource: Voting and Election Science Team, University of Florida and Witchita State University',
      
  })
  
  // Add our layer to the map
  base_layer.addTo(map)
  unity_map.addTo(map)
  base_labels.addTo(map)

  if (isMobile)
  {
      //map.locate({setView: true, maxZoom: 10});  
  }
  

  map.on('zoomend', function() {
      console.log("Zoom: " + map.getZoom())
  });

  function onEachFeature(feature, layer) {
      layer.on({
          mouseover: highlightFeature,
          mouseout: resetHighlight,
          click: clickFeature
      });
  }
  
  function clickFeature(d)
  {
      console.log(d)
  }
